docker run -p 8080:8080 image_id
docker login
docker push image_id(repository_name:tag)

docker container exec unruffled_tereshkova ls /tmp
docker container cp target/hello-world-rest-api.jar 54cf414254e48d5f68c4d468b2dd4cbdd95d17f9e2074fdb9df7f64987697f2b:/tmp
docker container commit unruffled_tereshkova in28min/hello-world-rest-api:manual 
docker run -p 8080:8080 in28min/hello-world-rest-api:manual
docker container commit --change='CMD ["java","-jar","/tmp/hello-world-rest-api.jar"]' unruffled_tereshkova in28min:hello-world-rest-api:manual2
docker run -p 8080:8080 in28min/hello-world-rest-api:manual2
docker inspect in28min/hello-world-rest-api:dockerfile1
docker history in28min/hello-world-rest-api:dockerfile1

docker build -t in28min/hello-world-rest-api:dockerfile1 .
docker run -p 8080:8080 in28min/hello-world-rest-api:dockerfile1
docker history in28min/hello-world-rest-api:dockerfile1

docker run -p 8080:8080 in28min/hello-world-rest-api:0.0.1-SNAPSHOT

mvn docker:build
docker run -p 8080:8080 webservices/01-hello-world-rest-api

docker run -dit 51297c224d60
docker container exec 7714 ls /maven
docker run -p 8080:8080 01-hello-world-rest-api:latest

#/02-todo-web-application-h2/
docker run -p 8080:8080 in28min/todo-web-application-h2:0.0.1-SNAPSHOT
docker run -p 8080:8080 in28min/todo-web-application-h2:0.0.1-SNAPSHOT ping google.com
docker run -p 8080:8080 in28min/hello-world-rest-api:dockerfile1 param1 param2
docker run -p 8080:8080 in28min/todo-web-application-mysql:0.0.1-SNAPSHOT

docker run -p 8080:8080 --network=host  in28min/todo-web-application-mysql:0.0.1-SNAPSHOT ping http://localhost:8080 

docker network ls
docker inspect bridge
docker container run -p 8080:8080 --link=mysql -e RDS_HOSTNAME=mysql  in28min/todo-web-application-mysql:0.0.1-SNAPSHOT

docker network create web-application-mysql-network
docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 --network=web-application-mysql-network mysql:5.7
docker container run -p 8080:8080 --network=web-application-mysql-network -e RDS_HOSTNAME=mysql  in28min/todo-web-application-mysql:0.0.1-SNAPSHOT
docker container restart mysql
docker container run -p 8080:8080 --network=web-application-mysql-network -e RDS_HOSTNAME=mysql  in28min/todo-web-application-mysql:0.0.1-SNAPSHOT

docker container prune


docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 --network=web-application-mysql-network --volume mysql-database-volume:/var/lib/mysql  mysql:5.7


#/04-spring-boot-react-full-stack-h2/restful-web-services/
docker tag 3f4765872126 in28min/rest-api-full-stack:2stagebuild
docker run -p 8080:8080 in28min/rest-api-full-stack:2stagebuild

npm install
npm start
npm run build

docker network create currency-network
docker run -p 8000:8000 --network=currency-network --name=currency-exchange-service in28min/currency-exchange-service:0.0.1-SNAPSHOT
docker run -p 8100:8100 --network=currency-network --name=currency-conversion-service --env CURRENCY_EXCHANGE_URI=http://currency-exchange-service:8000 -d in28min/currency-conversion-service:0.0.1-SNAPSHOT

docker-compose up
docker-compose up -d
docker-compose scale currency-conversion-service=2
docker-compose logs
docker-compose logs -f

docker system prun
docker system prune -a

docker search mysql
docker images
docker tag in28min/todo-rest-api-h2:1.0.0.RELEASE latest
docker rmi latest:latest
docker pull mysql
docker image ls --format='{{json .}}'

docker container run -p 5000:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE
docker container pause 6478
docker container unpause 6478

docker run -p 5000:5000 in28min/todo-rest-api-h2:0.0.1-SNAPSHOT
docker run -p 5000:5000 -d in28min/todo-rest-api-h2:0.0.1-SNAPSHOT
docker run -p 5000:5000 -d --restart=always in28min/todo-rest-api-h2:0.0.1-SNAPSHOT

docker events
docker top c710
docker stats
docker run -m 512m --cpu-quota 50000
docker system df

docker container stop 1b1
docker container kill 9b8

docker-compose config
docker-compose images
docker-compose ps
docker-compose top
docker-compose pause
docker-compose unpause
docker-compose rm
docker-compose build
docker-compose events


------------------------------------------------------ 07/07/2024
build docker image in 3 different ways.
1) using Dockerfile 2) Build paccks 3) Google Jib

build using Dockerfile
-------------------------------------
FROM openjdk:21-jdk-slim
LABEL maintainer="sai kalyan uppala"
COPY target/accounts-1.0.jar accounts-1.0.jar
ENTRYPOINT [ "java","-jar","accounts-1.0.jar" ]

mvn clean install
mvn spring-boot:run --> Will run the jar file using mvn command

docker build -t saikalyan08/accounts:s4 .
docker images
docker inspect image image_id
docker run -p 8080:8080 saikalyan08/accounts:s4
docker run -d -p 8080:8080 saikalyan08/accounts:s4 (running docker image in detached mode)
docker ps (Show running containers)
docker ps -a (show running and previously run containers)
docker start container_id
docker stop container_id

--------------------------------------------------------------
building docker image using build packs

give below information under configuration tag.
	<image>
		<name>
			saikalyan08/${project.artifactId}:s4
		</name>
	</image>

mvn spring-boot:build-image
-----------------------------------------------------------------
build docker image using google jib
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>3.4.3</version>
        <configuration>
          <to>
            <image>myimage</image>
          </to>
        </configuration>
      </plugin>
mvn compile jib:dockerBuild

---------------------------------------------------------------------
mvn spring-boot:run -- to run jar file which is generated in target folder
java -jar target/accounts-0.0.1-SNAPSHOT.jar -- to run jar file directly

create docker image using mvnw command.
./mvnw spring-boot:build-image "-Dspring-boot.build-image.imageName=saikalyan08/firstjobimage"

./mvnw spring-boot:build-image "-Dspring-boot.build-image.imageName=saikalyan08/servicereg"
./mvnw spring-boot:build-image "-Dspring-boot.build-image.imageName=saikalyan08/companyms"
./mvnw spring-boot:build-image "-Dspring-boot.build-image.imageName=saikalyan08/reviewms"
./mvnw spring-boot:build-image "-Dspring-boot.build-image.imageName=saikalyan08/jobms"

------------------------------------------------------------------
pushing docker images to docker hub	
docker build -t saikalyan08/accounts:s4 .
docker login
docker image push docker.io/saikalyan08/accounts:s4

pulling docker images.
docker pull saikalyan08/accounts:s4

docker compose commands

docker-compose up or (docker compose up)
docker-compose up -d (start in detach mode)

docker compose stop (stops the containers)
docker compose start(starts the container)
docker-compose down (stops and remove the containers)





----------------------------------------------------------------------------------
docker run -d --name db -e POSTGRES_PASSWORD=mysecretpassword postgres

docker run -d --name pgadmin -e PGADMIN_DEFAULT_EMAIL=user@domain.com -e PGADMIN_DEFAULT_PASSWORD=SuperSecret dpage/pgadmin4

docker exec -it pgadmin ping db

docker rm -f db pgadmin

USING NETWORKS:

docker network create my-network

docker run -d --name db --network my-network -e POSTGRES_PASSWORD=mysecretpassword postgres

docker run -d --name pgadmin --network my-network -e PGADMIN_DEFAULT_EMAIL=user@domain.com -e PGADMIN_DEFAULT_PASSWORD=SuperSecret dpage/pgadmin4

docker exec -it pgadmin ping db

---------------------------------------------------------------------------
Start the PostgreSQL service:
docker run -d \
  --name postgres_container \
  -e POSTGRES_USER=saikalyan \
  -e POSTGRES_PASSWORD=saikalyan \
  -e PGDATA=/data/postgres \
  -v postgres:/data/postgres \
  -p 5432:5432 \
  --network postgres \
  --restart unless-stopped \
  postgres

Start the pgAdmin service:
docker run -d \
  --name pgadmin_container \
  -e PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org \
  -e PGADMIN_DEFAULT_PASSWORD=admin \
  -e PGADMIN_CONFIG_SERVER_MODE=False \
  -v pgadmin:/var/lib/pgadmin \
  -p 5050:80 \
  --network postgres \
  --restart unless-stopped \
  dpage/pgadmin4

docker network create postgres 
docker run -d --name postgres_container -e POSTGRES_USER=saikalyan -e POSTGRES_PASSWORD=saikalyan -e PGDATA=/data/postgres -v postgres:/data/postgres -p 5444:5444 --network postgres --restart unless-stopped postgres
docker run -d --name pgadmin_container -e PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org -e PGADMIN_DEFAULT_PASSWORD=admin -e PGADMIN_CONFIG_SERVER_MODE=False -v pgadmin:/var/lib/pgadmin -p 5050:80 --network postgres --restart unless-stopped dpage/pgadmin4

docker network create mysql-network
docker volume create mysql-volume
docker run -d -e MYSQL_ROOT_PASSWORD=dummypass --env MYSQL_USER=testing --env MYSQL_PASSWORD=dummypass --env MYSQL_DATABASE=todos --name mysql -p 3306:3306 mysql
--use below command
docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=dummypass --env MYSQL_USER=testing --env MYSQL_PASSWORD=dummypass --env MYSQL_DATABASE=todos -p 3306:3306 --network=mysql-network --volume mysql-volume:/var/lib/mysql mysql

docker exec -it mysql mysql -u root -p

docker run -d -p 9411:9411 --name zipkin openzipkin/zipkin
docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:3-management  (default un/ps: guest/guest)

mvn clean
mvn package
mvn clean package
jar -tf company-1.0.0.jar 
--------------------------------------------------------------------------------------------------------
services:
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: embarkx
      POSTGRES_PASSWORD: embarkx
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge

volumes:
  postgres:
  pgadmin:

